@page "/registropaciente"
@using System.Data
@using System.Collections
@using CAID.Data
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JSRuntime
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager Navigation
@rendermode InteractiveServer

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<PageTitle>Paciente - MEDICAL</PageTitle>

<h2 class="mb-1 fw-bold">
    <i class="fas fa-user me-3"></i>
    Gestión de Paciente
</h2>
<p class="mb-0 opacity-75">Sistema de administración de pacientes</p>

@if (pnlConsulta)
{
    <div class="card border-0 shadow-lg mb-4" style="backdrop-filter: blur(10px); background: rgba(255,255,255,0.95);">
        <div class="card-header border-0 bg-transparent">
            <div class="d-flex flex-wrap gap-3 align-items-center">
                <button type="button" class="btn btn-primary btn-lg rounded-pill px-4 shadow-sm" @onclick="_New">
                    <i class="fas fa-plus-circle me-2"></i>
                    Nuevo Paciente
                </button>
                <button type="button" class="btn btn-outline-primary btn-lg rounded-pill px-4 shadow-sm" @onclick="_Show">
                    <i class="fas fa-sync-alt me-2"></i>
                    Actualizar
                </button>
                <div class="ms-auto">
                    <span class="badge bg-info fs-6 rounded-pill px-3 py-2">
                        <i class="fas fa-database me-2"></i>
                        @(pacientesData?.Rows.Count ?? 0) registros
                    </span>
                </div>
            </div>
        </div>

        <div class="card-body p-0">
            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                    <p class="mt-3 text-muted">Cargando pacientes...</p>
                </div>
            }
            else if (pacientesData == null || pacientesData.Rows.Count == 0)
            {
                <div class="text-center py-5">
                    <i class="fas fa-users fa-4x text-muted mb-3"></i>
                    <h5 class="text-muted">No hay pacientes registrados</h5>
                    <p class="text-muted">Haga clic en "Nuevo Paciente" para agregar el primer registro</p>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover align-middle mb-0">
                        <thead class="table-dark">
                            <tr>
                                <th class="border-0 fw-bold d-none d-md-table-cell">
                                    <i class="fas fa-id-card me-2"></i>Código ID
                                </th>
                                <th class="border-0 fw-bold ps-4">
                                    <i class="fas fa-user me-2"></i>Nombre
                                </th>
                                <th class="border-0 fw-bold d-none d-md-table-cell">
                                    <i class="fas fa-user me-2"></i>Apellido
                                </th>
                                <th class="border-0 fw-bold d-none d-md-table-cell">
                                    <i class="fas fa-id-badge me-2"></i>Cédula
                                </th>
                                <th class="border-0 fw-bold d-none d-md-table-cell">
                                    <i class="fas fa-envelope me-2"></i>Correo
                                </th>
                                <th class="border-0 fw-bold text-center" style="width: 120px;">
                                    <i class="fas fa-cogs me-2"></i>Acciones
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (DataRow row in pacientesData.Rows)
                            {
                                <tr>
                                    <td class="d-none d-md-table-cell">
                                        @row["CODIGOID"]
                                    </td>
                                    <td class="ps-4">
                                        <button type="button" class="btn btn-link text-decoration-none p-0 text-start fw-semibold"
                                                @onclick="@(() => _Select("Edit", row["ROWGUID"].ToString()))">
                                            <i class="fas fa-user me-2 text-primary"></i>
                                            @row["NOMBRE"]
                                        </button>
                                    </td>
                                    <td class="d-none d-md-table-cell">
                                        @row["APELLIDO"]
                                    </td>
                                    <td class="d-none d-md-table-cell">
                                        @row["CEDULA"]
                                    </td>
                                    <td class="d-none d-md-table-cell">
                                        @row["CORREO"]
                                    </td>
                                    <td class="text-center">
                                        <div class="btn-group">
                                            <button type="button" class="btn btn-outline-primary btn-sm rounded-pill"
                                                    title="Editar paciente"
                                                    @onclick="@(() => _Select("Edit", row["ROWGUID"].ToString()))">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button type="button" class="btn btn-outline-danger btn-sm rounded-pill ms-1"
                                                    title="Eliminar paciente"
                                                    @onclick="@(() => _SelectDelete(row["ROWGUID"].ToString()))">
                                                <i class="fas fa-trash-alt"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
}

@if (pnlData)
{
    <div class="card border-0 shadow-lg">
        <div class="card-header border-0 bg-transparent">
            <div class="d-flex flex-wrap gap-3 align-items-center">
                <button type="button" class="btn btn-success btn-lg rounded-pill px-4 shadow-sm" @onclick="_Save">
                    <i class="fas fa-save me-2"></i>
                    Guardar
                </button>
                <button type="button" class="btn btn-outline-secondary btn-lg rounded-pill px-4 shadow-sm" @onclick="_Cancel">
                    <i class="fas fa-eraser me-2"></i>
                    Limpiar
                </button>
                <button type="button" class="btn btn-outline-dark btn-lg rounded-pill px-4 shadow-sm" @onclick="_Back">
                    <i class="fas fa-arrow-left me-2"></i>
                    Regresar
                </button>
            </div>
        </div>

        <div class="card-body">
            <EditForm Model="@pacienteModel" OnValidSubmit="_Save">
                <DataAnnotationsValidator />
                <ValidationSummary class="alert alert-danger" role="alert" />

                <div class="row g-4">
                    <div class="col-lg-4">
                        <div class="form-floating">
                            <InputText @bind-Value="pacienteModel.CodigoId" class="form-control form-control-lg" id="txtCodigo" maxlength="50" />
                            <label for="txtCodigo"><i class="fas fa-id-card me-2"></i>Código ID *</label>
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="form-floating">
                            <InputText @bind-Value="pacienteModel.Nombre" class="form-control form-control-lg" id="txtNombre" maxlength="100" />
                            <label for="txtNombre"><i class="fas fa-user me-2"></i>Nombre *</label>
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="form-floating">
                            <InputText @bind-Value="pacienteModel.Apellido" class="form-control form-control-lg" id="txtApellido" maxlength="255" />
                            <label for="txtApellido"><i class="fas fa-user me-2"></i>Apellido *</label>
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="form-floating">
                            <InputText @bind-Value="pacienteModel.Cedula" class="form-control form-control-lg" id="txtCedula" maxlength="100" />
                            <label for="txtCedula"><i class="fas fa-id-badge me-2"></i>Cédula</label>
                        </div>
                    </div>
                    <div class="col-lg-5">
                        <div class="form-floating">
                            <InputText @bind-Value="pacienteModel.Correo" class="form-control form-control-lg" id="txtCorreo" maxlength="255" />
                            <label for="txtCorreo"><i class="fas fa-envelope me-2"></i>Correo Electrónico</label>
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="form-floating">
                            <InputSelect @bind-Value="pacienteModel.Sexoid" class="form-select form-control-lg" id="txtSexoid">
                                <option value="">Seleccione</option>
                                <option value="M">Masculino</option>
                                <option value="F">Femenino</option>
                                <option value="O">Otro</option>
                            </InputSelect>
                            <label for="txtSexoid"><i class="fas fa-venus-mars me-2"></i>Sexo</label>
                        </div>
                    </div>

                    <div class="col-lg-4">
                        <div class="form-floating">
                            <InputDate @bind-Value="pacienteModel.Fnace" class="form-control form-control-lg" id="dtFnace" />
                            <label for="dtFnace"><i class="fas fa-calendar me-2"></i>Fecha de Nacimiento</label>
                        </div>
                    </div>
                </div>

                <button type="submit" hidden></button> <!-- Para OnValidSubmit -->
            </EditForm>
        </div>
    </div>
}

<!-- Toasts -->
<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="successToast" class="toast text-bg-success border-0" role="alert">
        <div class="d-flex">
            <div class="toast-body">
                <i class="fas fa-check-circle me-2"></i>
                <span id="successMessage"></span>
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
    </div>
    <div id="errorToast" class="toast text-bg-danger border-0" role="alert">
        <div class="d-flex">
            <div class="toast-body">
                <i class="fas fa-exclamation-triangle me-2"></i>
                <span id="errorMessage"></span>
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
    </div>
</div>

@code {
    private ArrayList xQueryParameters = new ArrayList();
    private ArrayList xQueryValues = new ArrayList();
    private string xCommand = string.Empty;
    private string xQuery = string.Empty;
    private string xGUID = string.Empty;

    private bool pnlConsulta = true;
    private bool pnlData = false;
    private bool isLoading = false;

    private DataTable pacientesData;

    private string xBase => "SMX00001_copy1";
    private string ROWGUID => xGUID?.ToUpper() ?? string.Empty;
    private string ROWUSERID => GetSessionValue("CURRENTUSR_ID");
    private string ROWSGXID => GetSessionValue("CURRENTUSR_SGXID");

    private PacienteModel pacienteModel = new();

    public class PacienteModel
    {
        [Required(ErrorMessage = "El código ID es requerido")]
        [MinLength(2, ErrorMessage = "El código ID debe tener al menos 2 caracteres")]
        [Display(Name = "Código ID")]
        public string CodigoId { get; set; } = string.Empty;

        [Required(ErrorMessage = "El nombre es requerido")]
        public string Nombre { get; set; } = string.Empty;

        [Required(ErrorMessage = "El apellido es requerido")]
        public string Apellido { get; set; } = string.Empty;

        public string Cedula { get; set; } = string.Empty;

        [EmailAddress(ErrorMessage = "Correo inválido")]
        public string Correo { get; set; } = string.Empty;

        public string Sexoid { get; set; } = string.Empty;

        public DateTime? Fnace { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await ValidateSession();
        xGUID = Guid.NewGuid().ToString().ToUpper();
        await _Iniciar();
    }

    private async Task ValidateSession()
    {
        if (string.IsNullOrEmpty(ROWUSERID))
        {
            await ShowErrorToast("Sesión no válida. Redirigiendo al login...");
            Navigation.NavigateTo("/login", true);
        }
    }

    private async Task _Iniciar()
    {
        string queryX = GetQueryParameter("X");

        if (queryX == null)
        {
            pnlConsulta = true;
            pnlData = false;
            pacientesData = null;
            _IniciarControles();
            await _Show();
        }
        else if (queryX == "DATA")
        {
            await _Show();
        }
        else
        {
            await LoadPatientForEdit(queryX);
        }
    }

    private async Task LoadPatientForEdit(string guid)
    {
        isLoading = true;
        try
        {
            xGUID = guid;
            xQueryParameters.Clear();
            xQueryValues.Clear();
            xQueryParameters.Add("@GUID");
            xQueryValues.Add(ROWGUID);
            xQueryParameters.Add("@ROWSGXID");
            xQueryValues.Add(ROWSGXID);
            xQuery = xBase + "S2";

            var dataTable = DB.ExecuteAdapter(xQuery, xQueryParameters, xQueryValues, CommandType.StoredProcedure);
            if (dataTable.Rows.Count > 0)
            {
                var row = dataTable.Rows[0];
                pacienteModel = new PacienteModel
                {
                    CodigoId = row["CODIGOID"].ToString(),
                    Nombre = row["NOMBRE"].ToString(),
                    Apellido = row["APELLIDO"].ToString(),
                    Cedula = row.IsNull("CEDULA") ? string.Empty : row["CEDULA"].ToString(),
                    Correo = row.IsNull("CORREO") ? string.Empty : row["CORREO"].ToString(),
                    Sexoid = row.IsNull("SEXOID") ? string.Empty : row["SEXOID"].ToString(),
                    Fnace = row.IsNull("FNACE") ? null : (DateTime?)row["FNACE"]
                };

                pnlConsulta = false;
                pnlData = true;
            }
        }
        catch (Exception ex)
        {
            await ShowErrorToast($"Error al cargar: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void _IniciarControles()
    {
        pacienteModel = new PacienteModel();
    }

    private async Task _New()
    {
        _IniciarControles();
        xGUID = Guid.NewGuid().ToString().ToUpper();
        pnlConsulta = false;
        pnlData = true;
    }

    private async Task _Show()
    {
        isLoading = true;
        try
        {
            pnlConsulta = true;
            pnlData = false;

            xQueryParameters.Clear();
            xQueryValues.Clear();
            xQueryParameters.Add("@ROWSGXID");
            xQueryValues.Add(ROWSGXID);
            xQueryParameters.Add("@NOMBRE");
            xQueryValues.Add("%");
            xQueryParameters.Add("@APELLIDO");
            xQueryValues.Add("%");

            xQuery = xBase + "S1";

            pacientesData = DB.ExecuteAdapter(xQuery, xQueryParameters, xQueryValues, CommandType.StoredProcedure);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error en _Show: {ex}");
            await ShowErrorToast($"Error al cargar: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task _Select(string command, string commandArgument)
    {
        xCommand = command;
        xGUID = commandArgument;

        if (xCommand == "Edit")
        {
            await LoadEditData();
        }
    }

    private async Task _SelectDelete(string commandArgument)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Confirmar eliminación?");
        if (!confirmed) return;

        xGUID = commandArgument;

        isLoading = true;
        try
        {
            xQueryParameters.Clear();
            xQueryValues.Clear();
            xQueryParameters.Add("@ROWGUID");
            xQueryValues.Add(ROWGUID);
            xQueryParameters.Add("@ROWUSERID");
            xQueryValues.Add(ROWUSERID);
            xQueryParameters.Add("@ROWSGXID");
            xQueryValues.Add(ROWSGXID);
            xQuery = xBase + "SD";

            if (DB.ExecuteNonQuery(xQuery, xQueryParameters, xQueryValues, CommandType.StoredProcedure))
            {
                await ShowSuccessToast("Eliminado exitosamente");
                await _Show();
            }
            else
            {
                await ShowErrorToast("No se pudo eliminar");
            }
        }
        catch (Exception ex)
        {
            await ShowErrorToast($"Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadEditData()
    {
        await LoadPatientForEdit(ROWGUID);
    }

    private async Task _Save()
    {
        isLoading = true;
        try
        {
            xQueryParameters.Clear();
            xQueryValues.Clear();

            xQueryParameters.Add("@CODIGOID");
            xQueryValues.Add(pacienteModel.CodigoId.Trim().ToUpper());

            xQueryParameters.Add("@NOMBRE");
            xQueryValues.Add(pacienteModel.Nombre.Trim().ToUpper());

            xQueryParameters.Add("@APELLIDO");
            xQueryValues.Add(pacienteModel.Apellido.Trim().ToUpper());

            xQueryParameters.Add("@CEDULA");
            xQueryValues.Add(string.IsNullOrEmpty(pacienteModel.Cedula) ? DBNull.Value : pacienteModel.Cedula.Trim());

            xQueryParameters.Add("@CORREO");
            xQueryValues.Add(string.IsNullOrEmpty(pacienteModel.Correo) ? DBNull.Value : pacienteModel.Correo.Trim());

            xQueryParameters.Add("@SEXOID");
            xQueryValues.Add(string.IsNullOrEmpty(pacienteModel.Sexoid) ? DBNull.Value : pacienteModel.Sexoid.Trim());

            xQueryParameters.Add("@FNACE");
            xQueryValues.Add(pacienteModel.Fnace ?? (object)DBNull.Value);

            xQueryParameters.Add("@ROWGUID");
            xQueryValues.Add(ROWGUID);

            xQueryParameters.Add("@ROWUSERID");
            xQueryValues.Add(ROWUSERID);

            xQueryParameters.Add("@ROWSGXID");
            xQueryValues.Add(ROWSGXID);

            xQuery = xBase + "SI";

            var result = DB.ExecuteNonQuery(xQuery, xQueryParameters, xQueryValues, CommandType.StoredProcedure);
            if (result)
            {
                await ShowSuccessToast("Guardado exitosamente");
                await _IniciarFormulario();
            }
            else
            {
                await ShowErrorToast("No se pudo guardar el paciente. Verifique si el código ID ya existe o contacte al administrador.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error en _Save: {ex}");
            await ShowErrorToast($"Error al guardar: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task _IniciarFormulario()
    {
        xGUID = Guid.NewGuid().ToString().ToUpper();
        _IniciarControles();
        pnlConsulta = true;
        pnlData = false;
        await _Show();
    }

    private void _Cancel()
    {
        _IniciarControles();
    }

    private async Task _Back()
    {
        await _IniciarFormulario();
    }

    private async Task ShowSuccessToast(string message)
    {
        await JSRuntime.InvokeVoidAsync("eval", $@"
            document.getElementById('successMessage').textContent = '{message}';
            new bootstrap.Toast(document.getElementById('successToast')).show();
        ");
    }

    private async Task ShowErrorToast(string message)
    {
        await JSRuntime.InvokeVoidAsync("eval", $@"
            document.getElementById('errorMessage').textContent = '{message}';
            new bootstrap.Toast(document.getElementById('errorToast')).show();
        ");
    }

    private string GetSessionValue(string key)
    {
        try
        {
            // Implementar según tu sistema de sesiones/auth
            return HttpContextAccessor?.HttpContext?.Session?.GetString(key) ?? key switch
            {
                "CURRENTUSR_ID" => "USER123",
                "CURRENTUSR_SGXID" => "SGX001",
                _ => string.Empty
            };
        }
        catch
        {
            return key switch
            {
                "CURRENTUSR_ID" => "USER123",
                "CURRENTUSR_SGXID" => "SGX001",
                _ => string.Empty
            };
        }
    }

    private string GetQueryParameter(string name)
    {
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        return query[name];
    }
}