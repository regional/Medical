@page "/paises"
@using System.Data
@using System.Collections
@using CAID.Data
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JSRuntime
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager Navigation
@rendermode InteractiveServer



<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>


<PageTitle>Países - MEDICAL</PageTitle>

<!-- Header con gradiente moderno -->
     
   
        <h2 class="mb-1 fw-bold">
            <i class="fas fa-globe me-3"></i>
            Gestión de Países
        </h2>
        <p class="mb-0 opacity-75">Sistema de administración de países</p>
    
    


@if (pnlConsulta)
{
    <!-- Panel de Consulta Moderno -->
    <div class="card border-0 shadow-lg mb-4" style="backdrop-filter: blur(10px); background: rgba(255,255,255,0.95);">
        <div class="card-header border-0 bg-transparent">
            <div class="d-flex flex-wrap gap-3 align-items-center">
                <button type="button" class="btn btn-primary btn-lg rounded-pill px-4 shadow-sm hover-lift" @onclick="_New">
                    <i class="fas fa-plus-circle me-2"></i>
                    Nuevo País
                </button>
                <button type="button" class="btn btn-outline-primary btn-lg rounded-pill px-4 shadow-sm hover-lift" @onclick="_Show">
                    <i class="fas fa-sync-alt me-2"></i>
                    Actualizar
                </button>
                <div class="ms-auto">
                    <span class="badge bg-info fs-6 rounded-pill px-3 py-2">
                        <i class="fas fa-database me-2"></i>
                        @(paisesData?.Rows.Count ?? 0) registros
                    </span>
                </div>
            </div>
        </div>

        <div class="card-body p-0">
            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                    <p class="mt-3 text-muted">Cargando países...</p>
                </div>
            }
            else if (paisesData == null || paisesData.Rows.Count == 0)
            {
                <div class="text-center py-5">
                    <i class="fas fa-map fa-4x text-muted mb-3"></i>
                    <h5 class="text-muted">No hay países registrados</h5>
                    <p class="text-muted">Haga clic en "Nuevo País" para agregar el primer registro</p>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover align-middle mb-0">
                        <thead class="table-dark">
                            <tr>
                                <th class="border-0 fw-bold ps-4">
                                    <i class="fas fa-flag me-2"></i>País
                                </th>
                                <th class="border-0 fw-bold d-none d-md-table-cell">
                                    <i class="fas fa-code me-2"></i>Código ISO
                                </th>
                                <th class="border-0 fw-bold text-center" style="width: 120px;">
                                    <i class="fas fa-cogs me-2"></i>Acciones
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (DataRow row in paisesData.Rows)
                            {
                                <tr class="hover-row">
                                    <td class="ps-4">
                                        <button type="button" class="btn btn-link text-decoration-none p-0 text-start fw-semibold hover-underline"
                                                @onclick="@(() => _Select("Edit", row["ROWGUID"].ToString()))"
                                                style="color: #495057;">
                                            <i class="fas fa-map-marker-alt me-2 text-primary"></i>
                                            @row["NOMBRE"]
                                        </button>
                                    </td>
                                    <td class="d-none d-md-table-cell">
                                        <span class="badge bg-light text-dark border rounded-pill px-3 py-2 font-monospace">
                                            @row["CODIGOID"]
                                        </span>
                                    </td>
                                    <td class="text-center">
                                        <div class="btn-group" role="group">
                                            <button type="button" class="btn btn-outline-primary btn-sm rounded-pill hover-scale"
                                                    title="Editar país"
                                                    @onclick="@(() => _Select("Edit", row["ROWGUID"].ToString()))">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button type="button" class="btn btn-outline-danger btn-sm rounded-pill hover-scale ms-1"
                                                    title="Eliminar país"
                                                    @onclick="@(() => _SelectDelete(row["ROWGUID"].ToString()))">
                                                <i class="fas fa-trash-alt"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
}

@if (pnlData)
{
    <!-- Panel de Edición Moderno -->
    <div class="card border-0 shadow-lg" style="backdrop-filter: blur(10px); background: rgba(255,255,255,0.95);">
        <div class="card-header border-0 bg-transparent">
            <div class="d-flex flex-wrap gap-3 align-items-center">
                <button type="button" class="btn btn-success btn-lg rounded-pill px-4 shadow-sm hover-lift" @onclick="_Save">
                    <i class="fas fa-save me-2"></i>
                    Guardar
                </button>
                <button type="button" class="btn btn-outline-secondary btn-lg rounded-pill px-4 shadow-sm hover-lift" @onclick="_Cancel">
                    <i class="fas fa-eraser me-2"></i>
                    Limpiar
                </button>
                <button type="button" class="btn btn-outline-dark btn-lg rounded-pill px-4 shadow-sm hover-lift" @onclick="_Back">
                    <i class="fas fa-arrow-left me-2"></i>
                    Regresar
                </button>
            </div>
        </div>

        <div class="card-body">
            <div class="row">
                <div class="col-12">
                    <div class="mb-4">
                        <h4 class="fw-bold text-primary mb-1">
                            <i class="fas fa-edit me-2"></i>
                            @(string.IsNullOrEmpty(xGUID) || xGUID == Guid.Empty.ToString() ? "Nuevo País" : "Editar País")
                        </h4>
                        <p class="text-muted mb-0">Complete la información del país</p>
                    </div>
                </div>
            </div>

            <div class="row g-4">
                <!-- Campo Nombre -->
                <div class="col-lg-8">
                    <div class="form-floating mb-3">
                        <input @bind="txtNombre" @bind:event="oninput"
                               type="text"
                               class="form-control form-control-lg border-2 @(string.IsNullOrWhiteSpace(txtNombre) && showValidation ? "is-invalid" : "")"
                               id="txtNombre"
                               placeholder="Ingrese el nombre del país"
                               style="border-radius: 15px;">
                        <label for="txtNombre" class="text-primary fw-semibold">
                            <i class="fas fa-globe me-2"></i>Nombre del País *
                        </label>
                        @if (string.IsNullOrWhiteSpace(txtNombre) && showValidation)
                        {
                            <div class="invalid-feedback fw-semibold">
                                <i class="fas fa-exclamation-circle me-1"></i>El nombre del país es requerido
                            </div>
                        }
                    </div>
                </div>

                <!-- Campo Código -->
                <div class="col-lg-4">
                    <div class="form-floating mb-3">
                        <input @bind="txtCodigo" @bind:event="oninput"
                               type="text"
                               class="form-control form-control-lg border-2 @(string.IsNullOrWhiteSpace(txtCodigo) && showValidation ? "is-invalid" : "")"
                               id="txtCodigo"
                               placeholder="Ej: GT, US, MX"
                               maxlength="3"
                               style="border-radius: 15px; text-transform: uppercase;">
                        <label for="txtCodigo" class="text-primary fw-semibold">
                            <i class="fas fa-code me-2"></i>Código ISO *
                        </label>
                        @if (string.IsNullOrWhiteSpace(txtCodigo) && showValidation)
                        {
                            <div class="invalid-feedback fw-semibold">
                                <i class="fas fa-exclamation-circle me-1"></i>El código ISO es requerido
                            </div>
                        }
                        else
                        {
                            <div class="form-text">
                                <i class="fas fa-info-circle me-1"></i>Código de país ISO (2-3 caracteres)
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Toast para notificaciones -->
<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="successToast" class="toast align-items-center text-white bg-success border-0" role="alert">
        <div class="d-flex">
            <div class="toast-body">
                <i class="fas fa-check-circle me-2"></i>
                <span id="successMessage"></span>
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
    </div>
    <div id="errorToast" class="toast align-items-center text-white bg-danger border-0" role="alert">
        <div class="d-flex">
            <div class="toast-body">
                <i class="fas fa-exclamation-circle me-2"></i>
                <span id="errorMessage"></span>
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
    </div>
</div>

<style>
    .hover-lift {
        transition: all 0.3s ease;
    }

        .hover-lift:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15) !important;
        }

    .hover-scale {
        transition: transform 0.2s ease;
    }

        .hover-scale:hover {
            transform: scale(1.1);
        }

    .hover-underline {
        transition: all 0.3s ease;
        position: relative;
    }

        .hover-underline:hover {
            color: #0d6efd !important;
        }

        .hover-underline:after {
            content: '';
            position: absolute;
            bottom: -2px;
            left: 0;
            width: 0;
            height: 2px;
            background-color: #0d6efd;
            transition: width 0.3s ease;
        }

        .hover-underline:hover:after {
            width: 100%;
        }

    .hover-row {
        transition: all 0.3s ease;
    }

        .hover-row:hover {
            background-color: rgba(13, 110, 253, 0.05);
            transform: translateX(5px);
        }

    .bg-gradient {
        position: relative;
        overflow: hidden;
    }

        .bg-gradient::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            animation: shimmer 3s infinite;
        }

    

    {
        left: -100%;
    }

    100% {
        left: 100%;
    }

    }

    .form-floating > .form-control:focus ~ label,
    .form-floating > .form-control:not(:placeholder-shown) ~ label {
        color: #0d6efd !important;
        transform: scale(0.85) translateY(-0.5rem) translateX(0.15rem);
    }

    .card {
        border-radius: 20px !important;
    }

    .btn {
        font-weight: 600;
        letter-spacing: 0.5px;
    }

    .table thead th {
        font-size: 0.95rem;
        font-weight: 700;
        letter-spacing: 0.5px;
        padding: 1rem;
    }

    .table tbody td {
        padding: 1rem;
        vertical-align: middle;
    }
</style>

@code {
    // Variables exactas como en el código original
    private ArrayList xQueryParameters = new ArrayList();
    private ArrayList xQueryValues = new ArrayList();
    private string xCommand = string.Empty;
    private string xQuery = string.Empty;
    private string xGUID = string.Empty;

    // Controles de panel
    private bool pnlConsulta = true;
    private bool pnlData = false;

    // Controles de formulario
    private string txtNombre = string.Empty;
    private string txtCodigo = string.Empty;

    // Estados modernos
    private bool isLoading = false;
    private bool showValidation = false;

    // Data
    private DataTable paisesData;

    // Propiedades exactas como en el código original
    private string xBase => "SMX00001";
    private string NOMBRE => txtNombre?.Trim().ToUpper() ?? string.Empty;
    private string CODIGOID => txtCodigo?.Trim().ToUpper() ?? string.Empty;
    private string ROWGUID => xGUID?.ToUpper() ?? string.Empty;
    private string ROWUSERID => GetSessionValue("CURRENTUSR_ID");
    private string ROWSGXID => GetSessionValue("CURRENTUSR_SGXID");

    protected override async Task OnInitializedAsync()
    {
        // Simular Page_Load con mejoras modernas
        await ValidateSession();
        xGUID = Guid.NewGuid().ToString().ToUpper();
        await _Iniciar();
    }

    private async Task ValidateSession()
    {
        if (string.IsNullOrEmpty(GetSessionValue("CURRENTUSR_ID")))
        {
            await ShowErrorToast("Sesión no válida. Redirigiendo al login...");
            // Navigation.NavigateTo("/login", true);
            return;
        }
    }

    private async Task _Iniciar()
    {
        string queryX = GetQueryParameter("X");

        if (queryX == null)
        {
            xGUID = Guid.NewGuid().ToString().ToUpper();
            pnlConsulta = true;
            pnlData = false;
            paisesData = null;
            _IniciarControles();
            await _Show(); // Auto-cargar datos
        }
        else if (queryX == "DATA")
        {
            await _Show();
        }
        else
        {
            await LoadCountryForEdit(queryX);
        }
    }

    private async Task LoadCountryForEdit(string guid)
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            xGUID = guid;
            xQueryParameters.Clear();
            xQueryValues.Clear();
            xQueryParameters.Add("@GUID");
            xQueryValues.Add(ROWGUID);
            xQueryParameters.Add("@ROWSGXID");
            xQueryValues.Add(ROWSGXID);
            xQuery = xBase + "S2";

            DataTable dataTable = DB.ExecuteAdapter(xQuery, xQueryParameters, xQueryValues, CommandType.StoredProcedure);
            DataRow dataRow = dataTable.Rows.Count != 0 ? dataTable.Rows[0] : null;

            if (dataRow != null)
            {
                txtNombre = dataRow["NOMBRE"].ToString();
                txtCodigo = dataRow["CODIGOID"].ToString();
                pnlConsulta = false;
                pnlData = true;
                showValidation = false;
            }
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void _IniciarControles()
    {
        txtNombre = string.Empty;
        txtCodigo = string.Empty;
        showValidation = false;
    }

    private async Task _IniciarFormulario()
    {
        xGUID = Guid.NewGuid().ToString().ToUpper();
        _IniciarControles();
        pnlConsulta = true;
        pnlData = false;
        await _Show();
    }

    protected async Task _New()
    {
        _IniciarControles();
        xGUID = Guid.NewGuid().ToString().ToUpper();
        pnlConsulta = false;
        pnlData = true;
        StateHasChanged();
    }

    protected async Task _Show()
    {
        try
        {
            isLoading = true;
            pnlConsulta = true;
            pnlData = false;
            StateHasChanged();

            await Task.Delay(300); // UX: Mostrar loading un momento

            xQueryParameters.Clear();
            xQueryValues.Clear();
            xQueryParameters.Add("@NOMBRE");
            xQueryValues.Add("%");
            xQueryParameters.Add("@ROWSGXID");
            xQueryValues.Add(ROWSGXID);
            xQuery = xBase + "S1";

            paisesData = DB.ExecuteAdapter(xQuery, xQueryParameters, xQueryValues, CommandType.StoredProcedure);
        }
        catch (Exception ex)
        {
            await ShowErrorToast($"Error al cargar países: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    protected async Task _Select(string command, string commandArgument)
    {
        xCommand = command;
        xGUID = commandArgument;

        try
        {
            if (xCommand == "Edit")
            {
                await LoadEditData();
            }
        }
        catch (Exception ex)
        {
            await ShowErrorToast($"Error: {ex.Message}");
        }
    }

    protected async Task _SelectDelete(string commandArgument)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            "⚠️ ¿Está seguro que desea eliminar este país?\n\nEsta acción no se puede deshacer.");
        if (!confirmed) return;

        xCommand = "Delete";
        xGUID = commandArgument;

        try
        {
            isLoading = true;
            StateHasChanged();

            xQueryParameters.Clear();
            xQueryValues.Clear();
            xQueryParameters.Add("@ROWGUID");
            xQueryValues.Add(ROWGUID);
            xQueryParameters.Add("@ROWUSERID");
            xQueryValues.Add(ROWUSERID);
            xQueryParameters.Add("@ROWSGXID");
            xQueryValues.Add(ROWSGXID);
            xQuery = xBase + "SD";

            if (DB.ExecuteNonQuery(xQuery, xQueryParameters, xQueryValues, CommandType.StoredProcedure))
            {
                await ShowSuccessToast("País eliminado exitosamente");
                await _Show();
            }
            else
            {
                await ShowErrorToast("No se pudo eliminar el país");
            }
        }
        catch (Exception ex)
        {
            await ShowErrorToast($"Error al eliminar: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadEditData()
    {
        try
        {
            xQueryParameters.Clear();
            xQueryValues.Clear();
            xQueryParameters.Add("@GUID");
            xQueryValues.Add(ROWGUID);
            xQueryParameters.Add("@ROWSGXID");
            xQueryValues.Add(ROWSGXID);
            xQuery = xBase + "S2";

            DataTable dataTable = DB.ExecuteAdapter(xQuery, xQueryParameters, xQueryValues, CommandType.StoredProcedure);

            if (dataTable.Rows.Count > 0)
            {
                DataRow row = dataTable.Rows[0];
                txtNombre = row["NOMBRE"].ToString();
                txtCodigo = row["CODIGOID"].ToString();
                pnlConsulta = false;
                pnlData = true;
                showValidation = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await ShowErrorToast($"Error al cargar datos: {ex.Message}");
        }
    }

    protected async Task _Save()
    {
        showValidation = true;

        if (string.IsNullOrWhiteSpace(txtNombre) || string.IsNullOrWhiteSpace(txtCodigo))
        {
            await ShowErrorToast("Por favor complete todos los campos requeridos");
            StateHasChanged();
            return;
        }

        if (txtCodigo.Length < 2)
        {
            await ShowErrorToast("El código ISO debe tener al menos 2 caracteres");
            return;
        }

        try
        {
            isLoading = true;
            StateHasChanged();

            xQueryParameters.Clear();
            xQueryValues.Clear();
            xQueryParameters.Add("@NOMBRE");
            xQueryValues.Add(NOMBRE);
            xQueryParameters.Add("@CODIGOID");
            xQueryValues.Add(CODIGOID);
            xQueryParameters.Add("@ROWGUID");
            xQueryValues.Add(ROWGUID);
            xQueryParameters.Add("@ROWUSERID");
            xQueryValues.Add(ROWUSERID);
            xQueryParameters.Add("@ROWSGXID");
            xQueryValues.Add(ROWSGXID);
            xQuery = xBase + "SI";

            if (DB.ExecuteNonQuery(xQuery, xQueryParameters, xQueryValues, CommandType.StoredProcedure))
            {
                await ShowSuccessToast("País guardado exitosamente");
                await Task.Delay(1500); // Dar tiempo para ver el toast
                await _IniciarFormulario();
            }
            else
            {
                await ShowErrorToast("No se pudo guardar el país");
            }
        }
        catch (Exception ex)
        {
            await ShowErrorToast($"Error al guardar: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    protected void _Cancel()
    {
        _IniciarControles();
        StateHasChanged();
    }

    protected async Task _Back()
    {
        await _IniciarFormulario();
    }

    // Métodos de Toast modernos
    private async Task ShowSuccessToast(string message)
    {
        await JSRuntime.InvokeVoidAsync("eval", $@"
            document.getElementById('successMessage').textContent = '{message}';
            new bootstrap.Toast(document.getElementById('successToast')).show();
        ");
    }

    private async Task ShowErrorToast(string message)
    {
        await JSRuntime.InvokeVoidAsync("eval", $@"
            document.getElementById('errorMessage').textContent = '{message}';
            new bootstrap.Toast(document.getElementById('errorToast')).show();
        ");
    }

    // Métodos helper para Session (implementar según tu sistema de auth)
    private string GetSessionValue(string key)
    {
        try
        {
            // Implementar según tu sistema de sesiones/auth
            return HttpContextAccessor?.HttpContext?.Session?.GetString(key) ?? key switch
            {
                "CURRENTUSR_ID" => "USER123",
                "CURRENTUSR_SGXID" => "SGX001",
                _ => string.Empty
            };
        }
        catch
        {
            return key switch
            {
                "CURRENTUSR_ID" => "USER123",
                "CURRENTUSR_SGXID" => "SGX001",
                _ => string.Empty
            };
        }
    }

    private string GetQueryParameter(string name)
    {
        try
        {
            var uri = new Uri(Navigation.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            return query[name];
        }
        catch
        {
            return null;
        }
    }
}